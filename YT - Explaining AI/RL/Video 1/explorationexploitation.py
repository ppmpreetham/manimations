from manim import *
import numpy as np

class ExplorationExploitation(Scene):
    def construct(self):
        BLUE = "#3498db"
        ORANGE = "#e67e22"
        GREEN = "#2ecc71"
        RED = "#e74c3c"
        
        # Title
        title = Text("Exploration vs Exploitation", font_size=36, color=BLUE)
        title.to_edge(UP)
        self.play(Write(title))
        
        # Multi-armed bandit visualization
        bandit_title = Text("Multi-Armed Bandit Problem", font_size=24, color=BLUE)
        bandit_title.move_to(UP * 2)
        self.play(Write(bandit_title))
        
        # Create slot machines
        machines = VGroup()
        rewards = [0.3, 0.7, 0.1, 0.9]  # True reward probabilities
        
        for i in range(4):
            # Machine body
            machine = Rectangle(width=1, height=2, color=BLUE, fill_opacity=0.3)
            machine.move_to(LEFT * 3 + i * 1.5 * RIGHT)
            
            # Arm
            arm = Rectangle(width=0.3, height=1, color=ORANGE)
            arm.next_to(machine, RIGHT, buff=0)
            
            # Reward probability (hidden initially)
            prob_text = Text(f"p={rewards[i]}", font_size=16, color=WHITE)
            prob_text.move_to(machine.get_center())
            
            # Estimated value (starts at 0)
            est_text = Text("Est: 0.0", font_size=12, color=YELLOW)
            est_text.next_to(machine, DOWN)
            
            machine_group = VGroup(machine, arm, prob_text, est_text)
            machines.add(machine_group)
        
        self.play(Create(machines))
        
        # Hide true probabilities initially
        for machine in machines:
            machine[2].set_opacity(0)  # Hide prob_text
        
        # Epsilon-greedy strategy explanation
        strategy_text = VGroup(
            Text("ε-Greedy Strategy:", font_size=20, color=GREEN),
            Text("• With probability ε: Explore (random action)", font_size=16, color=ORANGE),
            Text("• With probability 1-ε: Exploit (best known action)", font_size=16, color=GREEN)
        ).arrange(DOWN, aligned_edge=LEFT)
        strategy_text.to_edge(LEFT).shift(DOWN * 2)
        
        self.play(Write(strategy_text))
        
        # Simulate some pulls
        pulls = [1, 0, 2, 1, 1, 3, 1]  # Which machines to pull
        estimates = [0.0, 0.0, 0.0, 0.0]
        counts = [0, 0, 0, 0]
        
        for pull_idx, machine_idx in enumerate(pulls):
            # Highlight chosen machine
            highlight = SurroundingRectangle(machines[machine_idx], color=YELLOW, stroke_width=4)
            self.play(Create(highlight))
            
            # Simulate reward (random based on true probability)
            reward = 1 if np.random.random() < rewards[machine_idx] else 0
            counts[machine_idx] += 1
            estimates[machine_idx] = ((estimates[machine_idx] * (counts[machine_idx] - 1)) + reward) / counts[machine_idx]
            
            # Show reward
            reward_text = Text(f"Reward: {reward}", font_size=18, 
                             color=GREEN if reward else RED)
            reward_text.next_to(machines[machine_idx], UP)
            self.play(Write(reward_text))
            
            # Update estimate
            new_est_text = Text(f"Est: {estimates[machine_idx]:.2f}", 
                              font_size=12, color=YELLOW)
            new_est_text.move_to(machines[machine_idx][3].get_center())
            
            self.play(
                Transform(machines[machine_idx][3], new_est_text),
                FadeOut(reward_text),
                FadeOut(highlight),
                run_time=1
            )
        
        # Reveal true probabilities
        reveal_text = Text("True Probabilities:", font_size=18, color=WHITE)
        reveal_text.to_edge(RIGHT).shift(UP)
        self.play(Write(reveal_text))
        
        for machine in machines:
            self.play(machine[2].animate.set_opacity(1))
        
        self.wait(3)